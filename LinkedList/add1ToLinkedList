

class Solution {
    public int helper(Node temp) {
        if(temp == null) return 1;
        //because empty linkedlist + 1 = 1
        
        int carry = helper(temp.next);
        temp.data = temp.data+carry;
        if(temp.data<10) {
            return 0;
        }
        // data = 10
        temp.data = 0;
        return 1;
    }
    public Node addOne(Node head) {
        // code here.
        int carry = helper(head);
        if( carry == 1) {
            //adding new node to front
            Node newNode = new Node(carry);
            newNode.next = head;
            head = newNode;
        }
        return head;
    }
}

//Approach 1 using reverse operation
// public Node reverse(Node head) {
//         if(head == null || head.next == null) return head;
//         Node newHead = reverse(head.next);
//         Node front = head.next;
//         front.next = head;
//         head.next = null;
//         return newHead;
//     }
// public Node addOne(Node head) {
//         // code here.
//         if(head == null ) return null;
//         int carry = 1;
//         Node newHead = reverse(head);
//         Node ptr = newHead;
//         while(ptr != null) {
//             int sum = carry+ptr.data;
//             ptr.data = sum%10;
//             carry = sum / 10;
//             if(ptr.next == null && carry!=0) {
//                 Node node = new Node(carry);
//                 ptr.next = node;
//                 break;
//             } 
//             ptr = ptr.next;
//         }
//         return reverse(newHead);
//     }